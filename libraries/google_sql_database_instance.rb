# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
require 'google/sql/property/databaseinstance_disk_encryption_configuration'
require 'google/sql/property/databaseinstance_disk_encryption_status'
require 'google/sql/property/databaseinstance_failover_replica'
require 'google/sql/property/databaseinstance_ip_addresses'
require 'google/sql/property/databaseinstance_replica_configuration'
require 'google/sql/property/databaseinstance_replica_configuration_mysql_replica_configuration'
require 'google/sql/property/databaseinstance_server_ca_cert'
require 'google/sql/property/databaseinstance_settings'
require 'google/sql/property/databaseinstance_settings_backup_configuration'
require 'google/sql/property/databaseinstance_settings_database_flags'
require 'google/sql/property/databaseinstance_settings_ip_configuration'
require 'google/sql/property/databaseinstance_settings_ip_configuration_authorized_networks'

# A provider to manage Cloud SQL resources.
class SQLDatabaseInstance < GcpResourceBase
  name 'google_sql_database_instance'
  desc 'DatabaseInstance'
  supports platform: 'gcp'

  attr_reader :params, :backend_type, :connection_name, :database_version, :failover_replica, :instance_type, :ip_addresses, :ipv6_address, :master_instance_name, :max_disk_size, :name, :region, :replica_configuration, :settings, :gce_zone, :state, :disk_encryption_configuration, :disk_encryption_status, :server_ca_cert

  def initialize(params)
    super(params.merge({ use_http_transport: true }))
    @params = params
    @fetched = @connection.fetch(product_url(params[:beta]), resource_base_url, params, 'Get')
    parse unless @fetched.nil?
  end

  def parse
    @backend_type = @fetched['backendType']
    @connection_name = @fetched['connectionName']
    @database_version = @fetched['databaseVersion']
    @failover_replica = GoogleInSpec::SQL::Property::DatabaseInstanceFailoverReplica.new(@fetched['failoverReplica'], to_s)
    @instance_type = @fetched['instanceType']
    @ip_addresses = GoogleInSpec::SQL::Property::DatabaseInstanceIpAddressesArray.parse(@fetched['ipAddresses'], to_s)
    @ipv6_address = @fetched['ipv6Address']
    @master_instance_name = @fetched['masterInstanceName']
    @max_disk_size = @fetched['maxDiskSize']
    @name = @fetched['name']
    @region = @fetched['region']
    @replica_configuration = GoogleInSpec::SQL::Property::DatabaseInstanceReplicaConfiguration.new(@fetched['replicaConfiguration'], to_s)
    @settings = GoogleInSpec::SQL::Property::DatabaseInstanceSettings.new(@fetched['settings'], to_s)
    @gce_zone = @fetched['gceZone']
    @state = @fetched['state']
    @disk_encryption_configuration = GoogleInSpec::SQL::Property::DatabaseInstanceDiskEncryptionConfiguration.new(@fetched['diskEncryptionConfiguration'], to_s)
    @disk_encryption_status = GoogleInSpec::SQL::Property::DatabaseInstanceDiskEncryptionStatus.new(@fetched['diskEncryptionStatus'], to_s)
    @server_ca_cert = GoogleInSpec::SQL::Property::DatabaseInstanceServerCaCert.new(@fetched['serverCaCert'], to_s)
  end

  def exists?
    !@fetched.nil?
  end

  def to_s
    "DatabaseInstance #{@params[:database]}"
  end

  def has_ip_configuration_require_ssl?
    return false if @settings&.ip_configuration&.require_ssl.nil?
    return true if @settings.ip_configuration.require_ssl.to_s.casecmp('true').zero?
    false
  end

  def authorized_networks
    return [] if @settings&.ip_configuration&.authorized_networks.nil?
    @database.settings.ip_configuration.authorized_networks.map(&:value)
  end

  def primary_ip_address
    return '' if !@ip_addresses.size.zero? || @ip_addresses[0].ip_address.nil?
    @ip_addresses[0].ip_address
  end

  def has_log_checkpoints?
    return true if !@database_version.to_s.include? 'POSTGRES_'
    return true if @settings&.database_flags&.size.zero?
    @settings.database_flags.each do |database_flag|
      if database_flag.name.to_s.casecmp('log_checkpoints').zero?
        if database_flag.value.to_s.casecmp('on').zero?
          return true
        else
          return false
        end
      end
    end
    true
  end

  def has_log_connections?
    return true if !@database_version.to_s.include? 'POSTGRES_'
    return true if @settings&.database_flags.size.zero?
    @settings.database_flags.each do |database_flag|
      if database_flag.name.to_s.casecmp('log_connections').zero?
        if database_flag.value.to_s.casecmp('on').zero?
          return true
        else
          return false
        end
      end
    end
    true
  end

  def has_log_disconnections?
    return true if !@database_version.to_s.include? 'POSTGRES_'
    return true if @settings&.database_flags.size.zero?
    @settings.database_flags.each do |database_flag|
      if database_flag.name.to_s.casecmp('log_disconnections').zero?
        if database_flag.value.to_s.casecmp('on').zero?
          return true
        else
          return false
        end
      end
    end
    true
  end

  def has_log_lock_waits?
    return true if !@database_version.to_s.include? 'POSTGRES_'
    return true if @settings&.database_flags.size.zero?
    @settings.database_flags.each do |database_flag|
      if database_flag.name.to_s.casecmp('log_lock_waits').zero?
        if database_flag.value.to_s.casecmp('on').zero?
          return true
        else
          return false
        end
      end
    end
    true
  end

  def has_log_min_messages?
    return true if !@database_version.to_s.include? 'POSTGRES_'
    return true if @settings&.database_flags.size.zero?
    @settings.database_flags.each do |database_flag|
      if database_flag.name.to_s.casecmp('log_min_error_statement').zero?
        return !database_flag.value.to_s.nil?
      end
    end
  end

  def has_log_temp_files?
    return true if !@database_version.to_s.include? 'POSTGRES_'
    return true if @settings&.database_flags.size.zero?
    @settings.database_flags.each do |database_flag|
      if database_flag.name.to_s.casecmp('log_temp_files').zero?
        if database_flag.value.to_i.zero?
          return true
        else
          return false
        end
      end
    end
    true
  end


  def has_log_min_duration_statement?
    return true if !@database_version.to_s.include? 'POSTGRES_'
    return true if @settings&.database_flags.size.zero?
    @settings.database_flags.each do |database_flag|
      if database_flag.name.to_s.casecmp('log_min_duration_statement').zero?
        if database_flag.value.to_i==-1
          return true
        else
          return false
        end
      end
    end
    true
  end

  private

  def product_url(_ = nil)
    'https://www.googleapis.com/sql/v1beta4/'
  end

  def resource_base_url
    'projects/{{project}}/instances/{{database}}'
  end
end
